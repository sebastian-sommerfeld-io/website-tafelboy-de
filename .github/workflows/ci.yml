---
name: Continuous Integration

on:
  push:
    branches: [ "main", "feat/*", "release/*" ]
  pull_request:
    branches: [ "main", "feat/*", "release/*" ]
  schedule:
    - cron: '0 2 * * 1' # https://crontab.guru/#0_2_*_*_1

permissions:
  contents: read

jobs:
  lint-yaml:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run yamllint
        uses: ibiqlik/action-yamllint@v3

  lint-folders:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run folderslint in container
        run: docker run -i --rm --volume "$(pwd):$(pwd)" --workdir "$(pwd)" sommerfeldio/folderslint:latest folderslint

  lint-filenames:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run ls-lint in container
        run: docker run -i --rm --volume "$(pwd):/data" --workdir "/data" lslintorg/ls-lint:1.11.0

  shellcheck:
    runs-on: ubuntu-latest
    steps:
      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@master
        with:
          ignore_paths: node_modules target

  lint-dockerfile:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: hadolint
        uses: hadolint/hadolint-action@v2.0.0
        with:
          dockerfile: Dockerfile

  ci-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build HTML pages
        run: |
          SRC_DIR="src/main"
          TARGET_DIR="target/content"

          docker run --rm --volume "$(pwd):/documents" asciidoctor/docker-asciidoctor:latest \
            asciidoctor-revealjs -a revealjsdir=https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.9.2 "$SRC_DIR/index.adoc"

          rm -rf "$TARGET_DIR"
          mkdir -p "$TARGET_DIR"

          mv "$SRC_DIR/index.html" "$TARGET_DIR/index.html"
          cp -a "$SRC_DIR/images" "$TARGET_DIR"

      - name: Set docker tag ('ci-build' for main or feature branch, 'release-candidate' for release branch)
        id: vars
        run: |
          echo ${{ github.ref }}

          TAG='ci-build'
          REF='refs/heads/release/'

          if [[ ${{ github.ref }} == *${REF}* ]]; then
            TAG='release-candidate'
          fi

          echo "tag = $TAG"
          echo "DOCKER_TAG=$TAG" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker image build
        uses: docker/build-push-action@v3
        with:
          context: ./
          platforms: linux/amd64
          push: true
          tags: sommerfeldio/website-tafelboy-de:${{ steps.vars.outputs.DOCKER_TAG }}

      - name: Run Snyk to check Docker image for vulnerabilities
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: sommerfeldio/website-tafelboy-de:${{ steps.vars.outputs.DOCKER_TAG }}
          args: --file=Dockerfile

      - name: Upload snyk result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif

  on-failure:
    runs-on: ubuntu-latest
    needs: ['ci-build', 'lint-yaml', 'lint-folders', 'lint-filenames', 'shellcheck', 'lint-dockerfile']
    if: failure()

    steps:
      - name: Send Pipeline Status to Google Chat
        if: always()
        uses: Co-qn/google-chat-notification@releases/v1
        with:
          name: ${{ github.workflow }}
          url: ${{ secrets.GOOGLE_CHAT_WEBHOOK }}
          status: failure
